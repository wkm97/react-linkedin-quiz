{"version":3,"sources":["components/Challenge/ChallengeComponent.tsx","components/Challenge/MarkdownCustom.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChallengeStatus","components","code","node","inline","className","children","props","match","exec","style","dracula","language","PreTag","String","replace","MarkdownCustom","content","ExplainCard","explain","expand","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","SingleChoice","challenge","status","useState","selected","setSelected","choices","getChoices","getFieldClassname","idx","IDLE","getAnswers","includes","WRONG","Fragment","initialValues","onSubmit","values","onSelectedChange","parseInt","setValues","role","aria-labelledby","map","choice","idxString","type","name","checked","value","onClick","CORRECT","Question","displayQuestion","index","question","ChallengeComponent","setStatus","getExplanation","useEffect","undefined","getQuestion","getIndex","App","quiz","setQuiz","fetch","then","response","text","MdFileProcessor","getQuiz","console","log","getChallenges","item","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06c54c33.chunk.js","sourcesContent":["import { Challenge } from 'quiz-too';\nimport React, { useEffect, useState } from 'react'\nimport { Formik, Field, Form } from 'formik';\nimport MarkdownCustom from './MarkdownCustom';\nimport {Transition} from '@tailwindui/react';\n\ninterface challengeProps {\n    challenge: Challenge\n}\n\nenum ChallengeStatus {\n    IDLE,\n    CORRECT,\n    WRONG\n}\n\nconst ChallengeComponent = (props:challengeProps) => {\n    const {challenge} = props;\n    const [status, setStatus] = useState(ChallengeStatus.IDLE);\n    const [selected, setSelected] = useState<number[]>();\n    const explain = challenge.getExplanation();\n\n    useEffect(()=>{\n        if(selected !== undefined && challenge.getAnswers().includes(selected[0])){\n            setStatus(ChallengeStatus.CORRECT)\n        }else if(selected !== undefined){\n            setStatus(ChallengeStatus.WRONG)\n        }else if(selected === undefined){\n            setStatus(ChallengeStatus.IDLE)\n        }\n    },[selected, challenge])\n    \n    return (\n        <div className=\"block p-2 text-xs mx-10 my-4 md:text-base border rounded-lg shadow\">\n            <Question question={challenge.getQuestion()} index={challenge.getIndex()}/>\n            <SingleChoice challenge={challenge} status={status} onSelectedChange={(value)=> setSelected(value)}/>\n            {explain? <ExplainCard explain={explain} expand={status !== ChallengeStatus.IDLE? true: false}/>: null}\n            {/* <button className=\"mt-2 p-2\" onClick={()=>setSelected(undefined)}>REFRESH</button> */}\n        </div>\n    )\n}\n\nconst ExplainCard = (props:{explain:string, expand:boolean}) => {\n    const {explain, expand} = props;\n    \n    const getClassname = () => {\n        if(expand){\n            return \"block\"\n        }else{\n            return \"overflow-hidden hidden\"\n        }\n    }\n\n    return (\n        <Transition\n        show={expand}\n        enter=\"transition ease-out duration-500 transform\"\n        enterFrom=\"opacity-0 scale-95\"\n        enterTo=\"opacity-100 scale-100\"\n        leave=\"transition ease-in duration-75 transform\"\n        leaveFrom=\"opacity-100 scale-100\"\n        leaveTo=\"opacity-0 scale-95\"\n      >\n          <div className={`border-t-2 p-4 mt-4 select-text ${getClassname()}`}>\n              <p className=\"break-words text-gray-700 dark:text-gray-50 text-opacity-80\">{explain}</p>\n          </div>\n      </Transition>\n        \n    )\n}\n\ninterface singleChoiceProps {\n    challenge: Challenge,\n    status: ChallengeStatus,\n    onSelectedChange: (selected:number[]) => void,\n}\n\nconst SingleChoice = (props:singleChoiceProps) => {\n    const { challenge, status } = props;\n    const [selected, setSelected] = useState<number>(-9);\n    const choices = challenge.getChoices();\n\n    // useEffect(()=>{\n    //     if(selected === undefined){\n    //         status = ChallengeStatus.IDLE;\n    //     }\n    // },[selected])\n    \n\n    const getFieldClassname = (idx:number):string =>{\n        if(status !== ChallengeStatus.IDLE && challenge.getAnswers().includes(idx)){\n            return 'bg-gradient-to-r from-green-500 pointer-events-none';\n        }else if(status === ChallengeStatus.WRONG && idx === selected){\n            return 'bg-gradient-to-r from-red-500 pointer-events-none';\n        }else if(status !== ChallengeStatus.IDLE){\n            return 'pointer-events-none'\n        }else{\n            return ''\n        }\n    }\n\n    const getButtonClassname = () => {\n        if(status === ChallengeStatus.CORRECT){\n            return 'bg-green-400 pointer-events-none'\n        }else if(status === ChallengeStatus.WRONG){\n            return 'bg-red-400 pointer-events-none'\n        }else{\n            return 'bg-primary-400'\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n        <Formik\n            initialValues={{\n                selected: \"\",\n            }}\n            onSubmit={(values)=>{\n                props.onSelectedChange([parseInt(values.selected)]);\n                setSelected(parseInt(values.selected))\n            }}\n        >\n            {({values, setValues}) => (\n            <Form>\n                <div className=\"flex-col my-5\" role=\"group\" aria-labelledby=\"single-choices-group\">\n                    {choices.map((choice, idx)=> {\n                            const idxString = String(idx);\n\n                            return (\n                                <div className={`flex items-center p-2 rounded-l-lg ${getFieldClassname(idx)}`} key={idx}>\n\n                                    <Field type=\"radio\" name=\"selected\" checked={idxString===values.selected? true:false} value={idxString}/>\n\n                                    <span className=\"w-11/12 mx-2 overflow-x-auto text-gray-800 dark:text-gray-100\" onClick={()=>{\n                                        if(status === ChallengeStatus.IDLE){\n                                            setValues({selected: String(idx)})\n                                        }\n                                    }}>\n                                        <MarkdownCustom content={choice}/>\n                                    </span>\n                                    {/* <Field component={RadioContent} valueName=\"selected\" value={String(idx)} content={choice} selected={values.selected}/> */}\n                                </div>\n                            )\n                        }\n                    )}\n                </div>\n                <button className={`block p-2 font-bold uppercase transition duration-200 ease-in-out ${getButtonClassname()} text-gray-100 rounded-lg m-1 transform hover:-translate-y-1 hover:scale-110 hover:bg-primary-600 focus:outline-none`} type=\"submit\">Check</button>\n            </Form>\n        )}\n        </Formik>\n        {/* <button onClick={()=>setSelected(undefined)}>REFRESH</button> */}\n        </React.Fragment>\n    )\n}\n\n// interface radioContentProps {\n//     valueName:string,\n//     value:string,\n//     content:string\n//     selected:string\n// }\n\n// const RadioContent = (props:radioContentProps) => {\n\n//     const {valueName, value, content, selected} = props;\n\n//     const [field, , helpers] = useField({ name: valueName, type: \"radio\", value: value });\n\n//     const { setValue } = helpers;\n\n//     return (\n//         <React.Fragment>\n//             <input {...field} checked={value === selected} type=\"radio\"></input>\n//             <span className=\"ml-3 w-full\" onClick={()=>{setValue(value)}}><MarkdownCustom content={content}/></span>\n//         </React.Fragment>\n//     );\n// };\n\nconst Question = (props:{question:string, index:number}) =>{\n    const displayQuestion = \"Q\" + props.index + \". \" + props.question;\n\n    return <div className=\"border-blue-400 border-b-2 p-2 pb-4 overflow-x-auto\">\n        <MarkdownCustom content={displayQuestion} />\n    </div>\n}\n\nexport default ChallengeComponent;","\nimport ReactMarkdown from 'react-markdown';\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\n/* Use `…/dist/cjs/…` if you’re not in ESM! */\nimport {dracula} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\nconst components = {\n  code({node, inline, className, children, ...props}: any) {\n    const match = /language-(\\w+)/.exec(className || '')\n    return !inline && match ? (\n      <SyntaxHighlighter className={`${className} pointer-events-auto`} style={dracula} language={match[1]} PreTag=\"div\" children={String(children).replace(/\\n$/, '')} {...props} />\n    ) : (\n      <code className={`${className}`} children={children} {...props} />\n    )\n  }\n}\n\ninterface Props {\n    content: string;\n}\n\nconst MarkdownCustom = (props:Props) => {\n    return (\n        <ReactMarkdown components={components} children={props.content}/>\n    )\n}\n\nexport default MarkdownCustom;","import React, { useEffect, useState } from 'react';\nimport {MdFileProcessor, Quiz} from 'quiz-too';\nimport './css/index.css'\nimport ChallengeComponent from './components/Challenge/ChallengeComponent';\n\nfunction App() {\n  const [quiz, setQuiz] = useState<Quiz>()\n  useEffect(()=>{\n    fetch('https://raw.githubusercontent.com/Ebazhanov/linkedin-skill-assessments-quizzes/master/css/css-quiz.md').then(response=>response.text()).then(content=>{\n      const mdFileProcessor = new MdFileProcessor(content);\n      const quiz = mdFileProcessor.getQuiz();\n      console.log(quiz)\n      setQuiz(quiz);\n    })\n  }, [])\n\n  return (\n    <div className=\"flex-col justify-items-center pt-10 font-mono select-none bg-gray-100 dark:bg-gray-900 dark:text-gray-100\">\n      {quiz? quiz.getChallenges().map((item, idx)=> {return <ChallengeComponent key={idx} challenge={item}/>}):null}\n      {/* {quiz? <ChallengeComponent challenge={quiz.getChallenges()[8]} />: null}\n      {quiz? <ChallengeComponent challenge={quiz.getChallenges()[9]} />: null} */}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}